;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{or not class and}, :name hickory.select, :imports nil, :requires {zip clojure.zip, clojure.zip clojure.zip, string clojure.string, clojure.string clojure.string, hzip hickory.zip, hickory.zip hickory.zip}, :uses nil, :defs {tag {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 178, :column 7, :end-line 178, :end-column 10, :arglists (quote ([tag])), :doc "Return a function that takes a zip-loc argument and returns the\n   zip-loc passed in iff it has the given tag. The tag argument can be\n   a String or Named (keyword, symbol). The tag name comparison\n   is done case-insensitively."}, :name hickory.select/tag, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 10, :method-params ([tag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 178, :end-line 178, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tag])), :doc "Return a function that takes a zip-loc argument and returns the\n   zip-loc passed in iff it has the given tag. The tag argument can be\n   a String or Named (keyword, symbol). The tag name comparison\n   is done case-insensitively."}, child {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 485, :column 7, :end-line 485, :end-column 12, :arglists (quote ([& selectors])), :doc "Takes any number of selectors as arguments and returns a selector that\n   returns true when the zip-loc given as the argument is at the end of\n   a chain of direct child relationships specified by the selectors given as\n   arguments.\n\n   Example: (child (tag :div) (class :foo) (attr :disabled))\n     will select the input in\n   <div><span class=\"foo\"><input disabled></input></span></div>\n     but not in\n   <div><span class=\"foo\"><b><input disabled></input></b></span></div>", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(selectors)], :arglists ([& selectors]), :arglists-meta (nil)}}, :name hickory.select/child, :variadic true, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(selectors)], :arglists ([& selectors]), :arglists-meta (nil)}, :method-params [(selectors)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 485, :end-line 485, :max-fixed-arity 0, :fn-var true, :arglists ([& selectors]), :doc "Takes any number of selectors as arguments and returns a selector that\n   returns true when the zip-loc given as the argument is at the end of\n   a chain of direct child relationships specified by the selectors given as\n   arguments.\n\n   Example: (child (tag :div) (class :foo) (attr :disabled))\n     will select the input in\n   <div><span class=\"foo\"><input disabled></input></span></div>\n     but not in\n   <div><span class=\"foo\"><b><input disabled></input></b></span></div>"}, element-child {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 256, :column 7, :end-line 256, :end-column 20, :arglists (quote ([hzip-loc])), :doc "This selector takes no args, it simply is the selector function. It returns\n   the zip-loc passed in iff that loc is an element, and it has a parent\n   that is also an element."}, :name hickory.select/element-child, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 20, :method-params ([hzip-loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 256, :end-line 256, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hzip-loc])), :doc "This selector takes no args, it simply is the selector function. It returns\n   the zip-loc passed in iff that loc is an element, and it has a parent\n   that is also an element."}, right-of-node-type {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 86, :column 7, :end-line 86, :end-column 25, :arglists (quote ([hzip-loc node-type])), :doc "Like clojure.zip/right, but only counts moves to nodes that have\n   the given type."}, :name hickory.select/right-of-node-type, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 25, :method-params ([hzip-loc node-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 2, :fn-var true, :arglists (quote ([hzip-loc node-type])), :doc "Like clojure.zip/right, but only counts moves to nodes that have\n   the given type."}, right-pred {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 60, :column 7, :end-line 60, :end-column 17, :arglists (quote ([hzip-loc pred])), :doc "Like clojure.zip/right, but moves until it reaches a node that returns\n   true when the function in the pred argument is called on them, or reaches\n   the right boundary of the current group of siblings."}, :name hickory.select/right-pred, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 17, :method-params ([hzip-loc pred]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 2, :fn-var true, :arglists (quote ([hzip-loc pred])), :doc "Like clojure.zip/right, but moves until it reaches a node that returns\n   true when the function in the pred argument is called on them, or reaches\n   the right boundary of the current group of siblings."}, find-in-text {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 274, :column 7, :end-line 274, :end-column 19, :arglists (quote ([re])), :doc "Returns a function that takes a zip-loc argument and returns the zip-loc\n   passed in iff it has some text node in its contents that matches the regular\n   expression. Note that this only applies to the direct text content of a node;\n   nodes which have the given text in one of their child nodes will not be\n   selected."}, :name hickory.select/find-in-text, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 19, :method-params ([re]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 274, :end-line 274, :max-fixed-arity 1, :fn-var true, :arglists (quote ([re])), :doc "Returns a function that takes a zip-loc argument and returns the zip-loc\n   passed in iff it has some text node in its contents that matches the regular\n   expression. Note that this only applies to the direct text content of a node;\n   nodes which have the given text in one of their child nodes will not be\n   selected."}, precede {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 600, :column 7, :end-line 600, :end-column 14, :arglists (quote ([& selectors])), :doc "Takes any number of selectors as arguments and returns a selector that\n   returns true when the zip-loc given as the argument is at the beginning of\n   a chain of element sibling relationships specified by the selectors\n   given as arguments; intervening elements that do not satisfy a selector\n   are simply ignored and do not prevent a match.\n\n   Example: (precede (tag :div) (class :foo))\n     will select the div in both\n   <div>...</div><span class=\"foo\">...</span>\n     and\n   <div>...</div><b>...</b><span class=\"foo\">...</span>", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(selectors)], :arglists ([& selectors]), :arglists-meta (nil)}}, :name hickory.select/precede, :variadic true, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(selectors)], :arglists ([& selectors]), :arglists-meta (nil)}, :method-params [(selectors)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 600, :end-line 600, :max-fixed-arity 0, :fn-var true, :arglists ([& selectors]), :doc "Takes any number of selectors as arguments and returns a selector that\n   returns true when the zip-loc given as the argument is at the beginning of\n   a chain of element sibling relationships specified by the selectors\n   given as arguments; intervening elements that do not satisfy a selector\n   are simply ignored and do not prevent a match.\n\n   Example: (precede (tag :div) (class :foo))\n     will select the div in both\n   <div>...</div><span class=\"foo\">...</span>\n     and\n   <div>...</div><b>...</b><span class=\"foo\">...</span>"}, left-pred {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 52, :column 7, :end-line 52, :end-column 16, :arglists (quote ([hzip-loc pred])), :doc "Like clojure.zip/left, but moves until it reaches a node that returns\n   true when the function in the pred argument is called on them, or reaches\n   the left boundary of the current group of siblings."}, :name hickory.select/left-pred, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 16, :method-params ([hzip-loc pred]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 2, :fn-var true, :arglists (quote ([hzip-loc pred])), :doc "Like clojure.zip/left, but moves until it reaches a node that returns\n   true when the function in the pred argument is called on them, or reaches\n   the left boundary of the current group of siblings."}, attr {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 192, :column 7, :end-line 192, :end-column 11, :arglists (quote ([attr-name] [attr-name predicate])), :doc "Returns a function that takes a zip-loc argument and returns the\n   zip-loc passed in iff it has the given attribute, and that attribute\n   optionally satisfies a predicate given as an additional argument. With\n   a single argument, the attribute name (a string, keyword, or symbol),\n   the function returned will return the zip-loc if that attribute is\n   present (and has any value) on the zip-loc's node. The attribute name\n   will be compared case-insensitively, but the attribute value (if present),\n   will be passed as-is to the predicate.\n\n   If the predicate argument is given, it will only return the zip-loc if\n   that predicate is satisfied when given the attribute's value as its only\n   argument. Note that the predicate only gets called when the attribute is\n   present, so it can assume its argument is not nil.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([attr-name] [attr-name predicate]), :arglists ([attr-name] [attr-name predicate]), :arglists-meta (nil nil)}}, :name hickory.select/attr, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([attr-name] [attr-name predicate]), :arglists ([attr-name] [attr-name predicate]), :arglists-meta (nil nil)}, :method-params ([attr-name] [attr-name predicate]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 192, :end-line 192, :max-fixed-arity 2, :fn-var true, :arglists ([attr-name] [attr-name predicate]), :doc "Returns a function that takes a zip-loc argument and returns the\n   zip-loc passed in iff it has the given attribute, and that attribute\n   optionally satisfies a predicate given as an additional argument. With\n   a single argument, the attribute name (a string, keyword, or symbol),\n   the function returned will return the zip-loc if that attribute is\n   present (and has any value) on the zip-loc's node. The attribute name\n   will be compared case-insensitively, but the attribute value (if present),\n   will be passed as-is to the predicate.\n\n   If the predicate argument is given, it will only return the zip-loc if\n   that predicate is satisfied when given the attribute's value as its only\n   argument. Note that the predicate only gets called when the attribute is\n   present, so it can assume its argument is not nil."}, select {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 150, :column 7, :end-line 150, :end-column 13, :arglists (quote ([selector-fn hickory-tree])), :doc "Given a selector function and a hickory data structure, returns a vector\n   containing all of the hickory nodes selected by the selector function."}, :name hickory.select/select, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 13, :method-params ([selector-fn hickory-tree]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 2, :fn-var true, :arglists (quote ([selector-fn hickory-tree])), :doc "Given a selector function and a hickory data structure, returns a vector\n   containing all of the hickory nodes selected by the selector function."}, any {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 244, :column 7, :end-line 244, :end-column 10, :arglists (quote ([hzip-loc])), :doc "This selector takes no args, it simply is the selector function. It returns\n   true on any element it is called on; corresponds to the CSS '*' selector."}, :name hickory.select/any, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 10, :method-params ([hzip-loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 244, :end-line 244, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hzip-loc])), :doc "This selector takes no args, it simply is the selector function. It returns\n   true on any element it is called on; corresponds to the CSS '*' selector."}, nth-child {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 366, :column 7, :end-line 366, :end-column 16, :arglists (quote ([c] [n c])), :doc "Returns a function that returns true if the node is the nth child of\n   its parent (and it has a parent). First element is 1, last is n.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([c] [n c]), :arglists ([c] [n c]), :arglists-meta (nil nil)}}, :name hickory.select/nth-child, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([c] [n c]), :arglists ([c] [n c]), :arglists-meta (nil nil)}, :method-params ([c] [n c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 366, :end-line 366, :max-fixed-arity 2, :fn-var true, :arglists ([c] [n c]), :doc "Returns a function that returns true if the node is the nth child of\n   its parent (and it has a parent). First element is 1, last is n."}, nth-of-type {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 318, :column 7, :end-line 318, :end-column 18, :arglists (quote ([c typ] [n c typ])), :doc "Returns a function that returns true if the node is the nth child of\n   its parent (and it has a parent) of the given tag type. First element is 1,\n   last is n.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([c typ] [n c typ]), :arglists ([c typ] [n c typ]), :arglists-meta (nil nil)}}, :name hickory.select/nth-of-type, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([c typ] [n c typ]), :arglists ([c typ] [n c typ]), :arglists-meta (nil nil)}, :method-params ([c typ] [n c typ]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 318, :end-line 318, :max-fixed-arity 3, :fn-var true, :arglists ([c typ] [n c typ]), :doc "Returns a function that returns true if the node is the nth child of\n   its parent (and it has a parent) of the given tag type. First element is 1,\n   last is n."}, follow-adjacent {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 499, :column 7, :end-line 499, :end-column 22, :arglists (quote ([& selectors])), :doc "Takes any number of selectors as arguments and returns a selector that\n   returns true when the zip-loc given as the argument is at the end of\n   a chain of direct element sibling relationships specified by the selectors\n   given as arguments.\n\n   Example: (follow-adjacent (tag :div) (class :foo))\n     will select the span in\n   <div>...</div><span class=\"foo\">...</span>\n     but not in\n   <div>...</div><b>...</b><span class=\"foo\">...</span>", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(selectors)], :arglists ([& selectors]), :arglists-meta (nil)}}, :name hickory.select/follow-adjacent, :variadic true, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(selectors)], :arglists ([& selectors]), :arglists-meta (nil)}, :method-params [(selectors)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 499, :end-line 499, :max-fixed-arity 0, :fn-var true, :arglists ([& selectors]), :doc "Takes any number of selectors as arguments and returns a selector that\n   returns true when the zip-loc given as the argument is at the end of\n   a chain of direct element sibling relationships specified by the selectors\n   given as arguments.\n\n   Example: (follow-adjacent (tag :div) (class :foo))\n     will select the span in\n   <div>...</div><span class=\"foo\">...</span>\n     but not in\n   <div>...</div><b>...</b><span class=\"foo\">...</span>"}, first-child {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 403, :column 7, :end-line 403, :end-column 18, :arglists (quote ([hzip-loc])), :doc "This selector takes no args, it is simply the selector. Returns\n   true if the node is the first child of its parent (and it has a\n   parent)."}, :name hickory.select/first-child, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 18, :method-params ([hzip-loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 403, :end-line 403, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hzip-loc])), :doc "This selector takes no args, it is simply the selector. Returns\n   true if the node is the first child of its parent (and it has a\n   parent)."}, follow {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 585, :column 7, :end-line 585, :end-column 13, :arglists (quote ([& selectors])), :doc "Takes any number of selectors as arguments and returns a selector that\n   returns true when the zip-loc given as the argument is at the end of\n   a chain of element sibling relationships specified by the selectors\n   given as arguments; intervening elements that do not satisfy a selector\n   are simply ignored and do not prevent a match.\n\n   Example: (follow (tag :div) (class :foo))\n     will select the span in both\n   <div>...</div><span class=\"foo\">...</span>\n     and\n   <div>...</div><b>...</b><span class=\"foo\">...</span>", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(selectors)], :arglists ([& selectors]), :arglists-meta (nil)}}, :name hickory.select/follow, :variadic true, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(selectors)], :arglists ([& selectors]), :arglists-meta (nil)}, :method-params [(selectors)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 585, :end-line 585, :max-fixed-arity 0, :fn-var true, :arglists ([& selectors]), :doc "Takes any number of selectors as arguments and returns a selector that\n   returns true when the zip-loc given as the argument is at the end of\n   a chain of element sibling relationships specified by the selectors\n   given as arguments; intervening elements that do not satisfy a selector\n   are simply ignored and do not prevent a match.\n\n   Example: (follow (tag :div) (class :foo))\n     will select the span in both\n   <div>...</div><span class=\"foo\">...</span>\n     and\n   <div>...</div><b>...</b><span class=\"foo\">...</span>"}, count-until {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 25, :column 7, :end-line 25, :end-column 18, :arglists (quote ([f val pred])), :doc "Calls f on val until pred called on the result is true. If not, it\n   repeats by calling f on the result, etc. The count of times this\n   process was repeated until pred returned true is returned."}, :name hickory.select/count-until, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 18, :method-params ([f val pred]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f val pred])), :doc "Calls f on val until pred called on the result is true. If not, it\n   repeats by calling f on the result, etc. The count of times this\n   process was repeated until pred returned true is returned."}, next-of-node-type {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 68, :column 7, :end-line 68, :end-column 24, :arglists (quote ([hzip-loc node-type])), :doc "Like clojure.zip/next, but only counts moves to nodes that have\n   the given type."}, :name hickory.select/next-of-node-type, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 24, :method-params ([hzip-loc node-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 2, :fn-var true, :arglists (quote ([hzip-loc node-type])), :doc "Like clojure.zip/next, but only counts moves to nodes that have\n   the given type."}, element {:name hickory.select/element, :file "resources/public/js/compiled/out/hickory/select.cljs", :line 251, :column 1, :end-line 251, :end-column 13, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 251, :column 6, :end-line 251, :end-column 13}, :doc "Another name for the any selector, to express that it can be used to only\n   select elements."}, nth-last-child {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 385, :column 7, :end-line 385, :end-column 21, :arglists (quote ([c] [n c])), :doc "Returns a function that returns true if the node has n siblings after it,\n   and has a parent.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([c] [n c]), :arglists ([c] [n c]), :arglists-meta (nil nil)}}, :name hickory.select/nth-last-child, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([c] [n c]), :arglists ([c] [n c]), :arglists-meta (nil nil)}, :method-params ([c] [n c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 385, :end-line 385, :max-fixed-arity 2, :fn-var true, :arglists ([c] [n c]), :doc "Returns a function that returns true if the node has n siblings after it,\n   and has a parent."}, el-not {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 447, :column 7, :end-line 447, :end-column 13, :arglists (quote ([selector])), :doc "Takes a selector argument and returns a selector that is true if\n   the underlying selector is false on its argument and vice versa, and\n   additionally that argument is an element node. Compared to the 'not'\n   selector, this corresponds more closely to the CSS equivalent, which\n   will only ever select elements."}, :name hickory.select/el-not, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 13, :method-params ([selector]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 447, :end-line 447, :max-fixed-arity 1, :fn-var true, :arglists (quote ([selector])), :doc "Takes a selector argument and returns a selector that is true if\n   the underlying selector is false on its argument and vice versa, and\n   additionally that argument is an element node. Compared to the 'not'\n   selector, this corresponds more closely to the CSS equivalent, which\n   will only ever select elements."}, precede-adjacent {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 515, :column 7, :end-line 515, :end-column 23, :arglists (quote ([& selectors])), :doc "Takes any number of selectors as arguments and returns a selector that\n   returns true when the zip-loc given as the argument is at the beginning of\n   a chain of direct element sibling relationships specified by the selectors\n   given as arguments.\n\n   Example: (precede-adjacent (tag :div) (class :foo))\n     will select the div in\n   <div>...</div><span class=\"foo\">...</span>\n     but not in\n   <div>...</div><b>...</b><span class=\"foo\">...</span>", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(selectors)], :arglists ([& selectors]), :arglists-meta (nil)}}, :name hickory.select/precede-adjacent, :variadic true, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(selectors)], :arglists ([& selectors]), :arglists-meta (nil)}, :method-params [(selectors)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 515, :end-line 515, :max-fixed-arity 0, :fn-var true, :arglists ([& selectors]), :doc "Takes any number of selectors as arguments and returns a selector that\n   returns true when the zip-loc given as the argument is at the beginning of\n   a chain of direct element sibling relationships specified by the selectors\n   given as arguments.\n\n   Example: (precede-adjacent (tag :div) (class :foo))\n     will select the div in\n   <div>...</div><span class=\"foo\">...</span>\n     but not in\n   <div>...</div><b>...</b><span class=\"foo\">...</span>"}, ordered-adjacent {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 457, :column 7, :end-line 457, :end-column 23, :arglists (quote ([move-fn & selectors])), :doc "Takes a zipper movement function and any number of selectors as arguments\n   and returns a selector that returns true when the zip-loc given as the\n   argument is satisfied by the first selector, and the zip-loc arrived at by\n   applying the move-fn argument is satisfied by the second selector, and so\n   on for all the selectors given as arguments. If the move-fn\n   moves to nil before the full selector list is satisfied, the entire\n   selector fails, but note that success is checked before a move to nil is\n   checked, so satisfying the last selector with the last node you can move\n   to succeeds.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(move-fn selectors)], :arglists ([move-fn & selectors]), :arglists-meta (nil)}}, :name hickory.select/ordered-adjacent, :variadic true, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(move-fn selectors)], :arglists ([move-fn & selectors]), :arglists-meta (nil)}, :method-params [(move-fn selectors)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 457, :end-line 457, :max-fixed-arity 1, :fn-var true, :arglists ([move-fn & selectors]), :doc "Takes a zipper movement function and any number of selectors as arguments\n   and returns a selector that returns true when the zip-loc given as the\n   argument is satisfied by the first selector, and the zip-loc arrived at by\n   applying the move-fn argument is satisfied by the second selector, and so\n   on for all the selectors given as arguments. If the move-fn\n   moves to nil before the full selector list is satisfied, the entire\n   selector fails, but note that success is checked before a move to nil is\n   checked, so satisfying the last selector with the last node you can move\n   to succeeds."}, or {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 431, :column 7, :end-line 431, :end-column 9, :arglists (quote ([& selectors])), :doc "Takes any number of selectors and returns a selector that is true if\n   any of the argument selectors are true.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(selectors)], :arglists ([& selectors]), :arglists-meta (nil)}}, :name hickory.select/or, :variadic true, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 9, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(selectors)], :arglists ([& selectors]), :arglists-meta (nil)}, :method-params [(selectors)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 431, :end-line 431, :max-fixed-arity 0, :fn-var true, :arglists ([& selectors]), :doc "Takes any number of selectors and returns a selector that is true if\n   any of the argument selectors are true."}, until {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 15, :column 7, :end-line 15, :end-column 12, :arglists (quote ([f val pred])), :doc "Calls f on val until pred called on the result is true. If not, it\n   repeats by calling f on the result, etc. The value that made pred\n   return true is returned."}, :name hickory.select/until, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 12, :method-params ([f val pred]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f val pred])), :doc "Calls f on val until pred called on the result is true. If not, it\n   repeats by calling f on the result, etc. The value that made pred\n   return true is returned."}, descendant {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 568, :column 7, :end-line 568, :end-column 17, :arglists (quote ([& selectors])), :doc "Takes any number of selectors as arguments and returns a selector that\n   returns true when the zip-loc given as the argument is at the end of\n   a chain of descendant relationships specified by the\n   selectors given as arguments. To be clear, the node selected matches\n   the final selector, but the previous selectors can match anywhere in\n   the node's ancestry, provided they match in the order they are given\n   as arguments, from top to bottom.\n\n   Example: (descendant (tag :div) (class :foo) (attr :disabled))\n     will select the input in both\n   <div><span class=\"foo\"><input disabled></input></span></div>\n     and\n   <div><span class=\"foo\"><b><input disabled></input></b></span></div>", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(selectors)], :arglists ([& selectors]), :arglists-meta (nil)}}, :name hickory.select/descendant, :variadic true, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(selectors)], :arglists ([& selectors]), :arglists-meta (nil)}, :method-params [(selectors)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 568, :end-line 568, :max-fixed-arity 0, :fn-var true, :arglists ([& selectors]), :doc "Takes any number of selectors as arguments and returns a selector that\n   returns true when the zip-loc given as the argument is at the end of\n   a chain of descendant relationships specified by the\n   selectors given as arguments. To be clear, the node selected matches\n   the final selector, but the previous selectors can match anywhere in\n   the node's ancestry, provided they match in the order they are given\n   as arguments, from top to bottom.\n\n   Example: (descendant (tag :div) (class :foo) (attr :disabled))\n     will select the input in both\n   <div><span class=\"foo\"><input disabled></input></span></div>\n     and\n   <div><span class=\"foo\"><b><input disabled></input></b></span></div>"}, after-subtree {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 92, :column 7, :end-line 92, :end-column 20, :arglists (quote ([zip-loc])), :doc "Given a zipper loc, returns the zipper loc that is the first one after\n   the arg's subtree, if there is a subtree. If there is no loc after this\n   loc's subtree, returns the end node."}, :name hickory.select/after-subtree, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 20, :method-params ([zip-loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 1, :fn-var true, :arglists (quote ([zip-loc])), :doc "Given a zipper loc, returns the zipper loc that is the first one after\n   the arg's subtree, if there is a subtree. If there is no loc after this\n   loc's subtree, returns the end node."}, not {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 439, :column 7, :end-line 439, :end-column 10, :arglists (quote ([selector])), :doc "Takes a selector argument and returns a selector that is true if\n   the underlying selector is false on its argument, and vice versa."}, :name hickory.select/not, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 10, :method-params ([selector]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 439, :end-line 439, :max-fixed-arity 1, :fn-var true, :arglists (quote ([selector])), :doc "Takes a selector argument and returns a selector that is true if\n   the underlying selector is false on its argument, and vice versa."}, prev-pred {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 44, :column 7, :end-line 44, :end-column 16, :arglists (quote ([hzip-loc pred])), :doc "Like clojure.zip/prev, but moves until it reaches a node that returns\n   true when the function in the pred argument is called on them, or reaches\n   the beginning."}, :name hickory.select/prev-pred, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 16, :method-params ([hzip-loc pred]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([hzip-loc pred])), :doc "Like clojure.zip/prev, but moves until it reaches a node that returns\n   true when the function in the pred argument is called on them, or reaches\n   the beginning."}, node-type {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 164, :column 7, :end-line 164, :end-column 16, :arglists (quote ([type])), :doc "Return a function that takes a zip-loc argument and returns the\n   zip-loc passed in iff it has the given node type. The type\n   argument can be a String or Named (keyword, symbol). The node type\n   comparison is done case-insensitively."}, :name hickory.select/node-type, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 16, :method-params ([type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 1, :fn-var true, :arglists (quote ([type])), :doc "Return a function that takes a zip-loc argument and returns the\n   zip-loc passed in iff it has the given node type. The type\n   argument can be a String or Named (keyword, symbol). The node type\n   comparison is done case-insensitively."}, select-next-loc {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 110, :column 7, :end-line 110, :end-column 22, :arglists (quote ([selector-fn hzip-loc] [selector-fn hzip-loc next-fn] [selector-fn hzip-loc next-fn end?-fn])), :doc "Given a selector function and a loc inside a hickory zip data structure,\n   returns the next zipper loc that satisfies the selection function. This can\n   be the loc that is passed in, so be sure to move to the next loc if you\n   want to use this function to exhaustively search through a tree manually.\n   Note that if there is no next node that satisfies the selection function, nil\n   is returned.\n\n   The third argument, if present, must be a function of one argument that is\n   called on a zipper loc to return the next loc to consider in the search. By\n   default, this argument is zip/next. The fourth argument, if present, must be\n   a function of one argument that is called on a zipper loc to determine if\n   the end of the search has been reached (true return value). When the fourth\n   argument returns true on a loc, that loc is not considered in the search and\n   the search finishes with a nil return. By default, the fourth argument is\n   zip/end?.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([selector-fn hzip-loc] [selector-fn hzip-loc next-fn] [selector-fn hzip-loc next-fn end?-fn]), :arglists ([selector-fn hzip-loc] [selector-fn hzip-loc next-fn] [selector-fn hzip-loc next-fn end?-fn]), :arglists-meta (nil nil nil)}}, :name hickory.select/select-next-loc, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([selector-fn hzip-loc] [selector-fn hzip-loc next-fn] [selector-fn hzip-loc next-fn end?-fn]), :arglists ([selector-fn hzip-loc] [selector-fn hzip-loc next-fn] [selector-fn hzip-loc next-fn end?-fn]), :arglists-meta (nil nil nil)}, :method-params ([selector-fn hzip-loc] [selector-fn hzip-loc next-fn] [selector-fn hzip-loc next-fn end?-fn]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 4, :fn-var true, :arglists ([selector-fn hzip-loc] [selector-fn hzip-loc next-fn] [selector-fn hzip-loc next-fn end?-fn]), :doc "Given a selector function and a loc inside a hickory zip data structure,\n   returns the next zipper loc that satisfies the selection function. This can\n   be the loc that is passed in, so be sure to move to the next loc if you\n   want to use this function to exhaustively search through a tree manually.\n   Note that if there is no next node that satisfies the selection function, nil\n   is returned.\n\n   The third argument, if present, must be a function of one argument that is\n   called on a zipper loc to return the next loc to consider in the search. By\n   default, this argument is zip/next. The fourth argument, if present, must be\n   a function of one argument that is called on a zipper loc to determine if\n   the end of the search has been reached (true return value). When the fourth\n   argument returns true on a loc, that loc is not considered in the search and\n   the search finishes with a nil return. By default, the fourth argument is\n   zip/end?."}, nth-last-of-type {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 342, :column 7, :end-line 342, :end-column 23, :arglists (quote ([c typ] [n c typ])), :doc "Returns a function that returns true if the node is the nth last child of\n   its parent (and it has a parent) of the given tag type. First element is 1,\n   last is n.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([c typ] [n c typ]), :arglists ([c typ] [n c typ]), :arglists-meta (nil nil)}}, :name hickory.select/nth-last-of-type, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([c typ] [n c typ]), :arglists ([c typ] [n c typ]), :arglists-meta (nil nil)}, :method-params ([c typ] [n c typ]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 342, :end-line 342, :max-fixed-arity 3, :fn-var true, :arglists ([c typ] [n c typ]), :doc "Returns a function that returns true if the node is the nth last child of\n   its parent (and it has a parent) of the given tag type. First element is 1,\n   last is n."}, left-of-node-type {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 80, :column 7, :end-line 80, :end-column 24, :arglists (quote ([hzip-loc node-type])), :doc "Like clojure.zip/left, but only counts moves to nodes that have\n   the given type."}, :name hickory.select/left-of-node-type, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 24, :method-params ([hzip-loc node-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists (quote ([hzip-loc node-type])), :doc "Like clojure.zip/left, but only counts moves to nodes that have\n   the given type."}, select-locs {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 138, :column 7, :end-line 138, :end-column 18, :arglists (quote ([selector-fn hickory-tree])), :doc "Given a selector function and a hickory data structure, returns a vector\n   containing all of the zipper locs selected by the selector function."}, :name hickory.select/select-locs, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 18, :method-params ([selector-fn hickory-tree]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 2, :fn-var true, :arglists (quote ([selector-fn hickory-tree])), :doc "Given a selector function and a hickory data structure, returns a vector\n   containing all of the zipper locs selected by the selector function."}, has-child {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 644, :column 7, :end-line 644, :end-column 16, :arglists (quote ([selector])), :doc "Takes a selector as argument and returns a selector that returns true\n   when some direct child node of the zip-loc given as the argument satisfies\n   the selector.\n\n   Example: (has-child (tag :div))\n     will select only the inner span in\n   <div><span><div></div></span></div>"}, :name hickory.select/has-child, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 16, :method-params ([selector]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 644, :end-line 644, :max-fixed-arity 1, :fn-var true, :arglists (quote ([selector])), :doc "Takes a selector as argument and returns a selector that returns true\n   when some direct child node of the zip-loc given as the argument satisfies\n   the selector.\n\n   Example: (has-child (tag :div))\n     will select only the inner span in\n   <div><span><div></div></span></div>"}, ordered {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 531, :column 7, :end-line 531, :end-column 14, :arglists (quote ([move-fn & selectors])), :doc "Takes a zipper movement function and any number of selectors as arguments\n   and returns a selector that returns true when the zip-loc given as the\n   argument is satisfied by the first selector, and some zip-loc arrived at by\n   applying the move-fn argument *one or more times* is satisfied by the second\n   selector, and so on for all the selectors given as arguments. If the move-fn\n   moves to nil before a the full selector list is satisfied, the entire\n   selector fails, but note that success is checked before a move to nil is\n   checked, so satisfying the last selector with the last node you can move\n   to succeeds.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(move-fn selectors)], :arglists ([move-fn & selectors]), :arglists-meta (nil)}}, :name hickory.select/ordered, :variadic true, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(move-fn selectors)], :arglists ([move-fn & selectors]), :arglists-meta (nil)}, :method-params [(move-fn selectors)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 531, :end-line 531, :max-fixed-arity 1, :fn-var true, :arglists ([move-fn & selectors]), :doc "Takes a zipper movement function and any number of selectors as arguments\n   and returns a selector that returns true when the zip-loc given as the\n   argument is satisfied by the first selector, and some zip-loc arrived at by\n   applying the move-fn argument *one or more times* is satisfied by the second\n   selector, and so on for all the selectors given as arguments. If the move-fn\n   moves to nil before a the full selector list is satisfied, the entire\n   selector fails, but note that success is checked before a move to nil is\n   checked, so satisfying the last selector with the last node you can move\n   to succeeds."}, root {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 267, :column 7, :end-line 267, :end-column 11, :arglists (quote ([hzip-loc])), :doc "This selector takes no args, it simply is the selector function. It returns\n   the zip-loc of the root node (the HTML element)."}, :name hickory.select/root, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 11, :method-params ([hzip-loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 267, :end-line 267, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hzip-loc])), :doc "This selector takes no args, it simply is the selector function. It returns\n   the zip-loc of the root node (the HTML element)."}, n-moves-until {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 286, :column 7, :end-line 286, :end-column 20, :arglists (quote ([n c move term-pred])), :doc "This selector returns a selector function that selects its argument if\n   that argument is some \"distance\" from a \"boundary.\" This is an abstract\n   way of phrasing it, but it captures the full generality.\n\n   The selector this function returns will apply the move argument to its own\n   output, beginning with its zipper loc argument, until the term-pred argument\n   called on its output returns true. At that point, the number of times the\n   move function was called successfully is compared to kn+c; if there exists\n   some value of k such that the two quantities are equal, then the selector\n   will return the argument zipper loc successfully.\n\n   For example, (n-moves-until 2 1 clojure.zip/left nil?) will return a selector\n   that calls zip/left on its own output, beginning with the argument zipper\n   loc, until its return value is nil (nil? returns true). Suppose it called\n   left 5 times before zip/left returned nil. Then the selector will return\n   with success, since 2k+1 = 5 for k = 2.\n\n   Most nth-child-* selectors in this package use n-moves-until in their\n   implementation."}, :name hickory.select/n-moves-until, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 20, :method-params ([n c move term-pred]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 286, :end-line 286, :max-fixed-arity 4, :fn-var true, :arglists (quote ([n c move term-pred])), :doc "This selector returns a selector function that selects its argument if\n   that argument is some \"distance\" from a \"boundary.\" This is an abstract\n   way of phrasing it, but it captures the full generality.\n\n   The selector this function returns will apply the move argument to its own\n   output, beginning with its zipper loc argument, until the term-pred argument\n   called on its output returns true. At that point, the number of times the\n   move function was called successfully is compared to kn+c; if there exists\n   some value of k such that the two quantities are equal, then the selector\n   will return the argument zipper loc successfully.\n\n   For example, (n-moves-until 2 1 clojure.zip/left nil?) will return a selector\n   that calls zip/left on its own output, beginning with the argument zipper\n   loc, until its return value is nil (nil? returns true). Suppose it called\n   left 5 times before zip/left returned nil. Then the selector will return\n   with success, since 2k+1 = 5 for k = 2.\n\n   Most nth-child-* selectors in this package use n-moves-until in their\n   implementation."}, prev-of-node-type {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 74, :column 7, :end-line 74, :end-column 24, :arglists (quote ([hzip-loc node-type])), :doc "Like clojure.zip/prev, but only counts moves to nodes that have\n   the given type."}, :name hickory.select/prev-of-node-type, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 24, :method-params ([hzip-loc node-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 2, :fn-var true, :arglists (quote ([hzip-loc node-type])), :doc "Like clojure.zip/prev, but only counts moves to nodes that have\n   the given type."}, id {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 223, :column 7, :end-line 223, :end-column 9, :arglists (quote ([id])), :doc "Returns a function that takes a zip-loc argument and returns the\n   zip-loc passed in iff it has the given id. The id argument can be\n   a String or Named (keyword, symbol). The id name comparison\n   is done case-insensitively."}, :name hickory.select/id, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 9, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 223, :end-line 223, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id])), :doc "Returns a function that takes a zip-loc argument and returns the\n   zip-loc passed in iff it has the given id. The id argument can be\n   a String or Named (keyword, symbol). The id name comparison\n   is done case-insensitively."}, class {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 232, :column 7, :end-line 232, :end-column 12, :arglists (quote ([class-name])), :doc "Returns a function that takes a zip-loc argument and returns the\n   zip-loc passed in iff it has the given class. The class argument can\n   be a String or Named (keyword, symbol). The class name comparison\n   is done case-insensitively."}, :name hickory.select/class, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 12, :method-params ([class-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 232, :end-line 232, :max-fixed-arity 1, :fn-var true, :arglists (quote ([class-name])), :doc "Returns a function that takes a zip-loc argument and returns the\n   zip-loc passed in iff it has the given class. The class argument can\n   be a String or Named (keyword, symbol). The class name comparison\n   is done case-insensitively."}, last-child {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 411, :column 7, :end-line 411, :end-column 17, :arglists (quote ([hzip-loc])), :doc "This selector takes no args, it is simply the selector. Returns\n   true if the node is the last child of its parent (and it has a\n   parent."}, :name hickory.select/last-child, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 17, :method-params ([hzip-loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 411, :end-line 411, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hzip-loc])), :doc "This selector takes no args, it is simply the selector. Returns\n   true if the node is the last child of its parent (and it has a\n   parent."}, has-descendant {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 615, :column 7, :end-line 615, :end-column 21, :arglists (quote ([selector])), :doc "Takes a selector as argument and returns a selector that returns true\n   when some descendant node of the zip-loc given as the argument satisfies\n   the selector.\n\n   Be aware that because this selector must do a full sub-tree search on\n   each node examined, it can have terrible performance. It's helpful if this is\n   a late clause in an `and`, to prevent it from even attempting to match\n   unless other criteria have been met first.\n\n   Example: (has-descendant (tag :div))\n     will select the span and the outer div, but not the inner div, in\n   <span><div><div></div></div></span>"}, :name hickory.select/has-descendant, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 21, :method-params ([selector]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 615, :end-line 615, :max-fixed-arity 1, :fn-var true, :arglists (quote ([selector])), :doc "Takes a selector as argument and returns a selector that returns true\n   when some descendant node of the zip-loc given as the argument satisfies\n   the selector.\n\n   Be aware that because this selector must do a full sub-tree search on\n   each node examined, it can have terrible performance. It's helpful if this is\n   a late clause in an `and`, to prevent it from even attempting to match\n   unless other criteria have been met first.\n\n   Example: (has-descendant (tag :div))\n     will select the span and the outer div, but not the inner div, in\n   <span><div><div></div></div></span>"}, next-pred {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 36, :column 7, :end-line 36, :end-column 16, :arglists (quote ([hzip-loc pred])), :doc "Like clojure.zip/next, but moves until it reaches a node that returns\n   true when the function in the pred argument is called on them, or reaches\n   the end."}, :name hickory.select/next-pred, :variadic false, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 16, :method-params ([hzip-loc pred]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([hzip-loc pred])), :doc "Like clojure.zip/next, but moves until it reaches a node that returns\n   true when the function in the pred argument is called on them, or reaches\n   the end."}, and {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/select.cljs", :line 423, :column 7, :end-line 423, :end-column 10, :arglists (quote ([& selectors])), :doc "Takes any number of selectors and returns a selector that is true if\n   all of the argument selectors are true.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(selectors)], :arglists ([& selectors]), :arglists-meta (nil)}}, :name hickory.select/and, :variadic true, :file "resources/public/js/compiled/out/hickory/select.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(selectors)], :arglists ([& selectors]), :arglists-meta (nil)}, :method-params [(selectors)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 423, :end-line 423, :max-fixed-arity 0, :fn-var true, :arglists ([& selectors]), :doc "Takes any number of selectors and returns a selector that is true if\n   all of the argument selectors are true."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:even :element :else :content :type :odd :id :class :attrs :tag :end :html}, :order [:type :end :tag :attrs :id :class :element :html :content :odd :even :else]}, :doc "Functions to query hickory-format HTML data.\n\n   See clojure.zip for more information on zippers, locs, nodes, next, etc."}