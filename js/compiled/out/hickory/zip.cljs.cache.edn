;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name hickory.zip, :imports nil, :requires {zip clojure.zip, clojure.zip clojure.zip}, :uses nil, :defs {hickory-zip {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/zip.cljs", :line 8, :column 7, :end-line 8, :end-column 18, :arglists (quote ([root])), :doc "Returns a zipper for html dom maps (as from as-hickory),\n  given a root element."}, :name hickory.zip/hickory-zip, :variadic false, :file "resources/public/js/compiled/out/hickory/zip.cljs", :end-column 18, :method-params ([root]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([root])), :doc "Returns a zipper for html dom maps (as from as-hickory),\n  given a root element."}, children {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/zip.cljs", :line 26, :column 8, :end-line 26, :end-column 16, :private true, :arglists (quote ([node])), :doc "Takes a hiccup node (normalized or not) and returns its children nodes."}, :private true, :name hickory.zip/children, :variadic false, :file "resources/public/js/compiled/out/hickory/zip.cljs", :end-column 16, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node])), :doc "Takes a hiccup node (normalized or not) and returns its children nodes."}, make {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/zip.cljs", :line 40, :column 8, :end-line 40, :end-column 12, :private true, :arglists (quote ([node children])), :doc "Takes a hiccup node (normalized or not) and a sequence of children nodes,\n   and returns a new node that has the the children argument as its children."}, :private true, :name hickory.zip/make, :variadic false, :file "resources/public/js/compiled/out/hickory/zip.cljs", :end-column 12, :method-params ([node children]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([node children])), :doc "Takes a hiccup node (normalized or not) and a sequence of children nodes,\n   and returns a new node that has the the children argument as its children."}, hiccup-zip {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/zip.cljs", :line 53, :column 7, :end-line 53, :end-column 17, :arglists (quote ([root])), :doc "Returns a zipper for Hiccup forms, given a root form."}, :name hickory.zip/hiccup-zip, :variadic false, :file "resources/public/js/compiled/out/hickory/zip.cljs", :end-column 17, :method-params ([root]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([root])), :doc "Returns a zipper for Hiccup forms, given a root form."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:content}, :order [:content]}, :doc nil}