;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name hickory.core, :imports nil, :requires {utils hickory.utils, hickory.utils hickory.utils, zip clojure.zip, clojure.zip clojure.zip, gstring goog.string, goog.string goog.string}, :uses nil, :defs {Attribute {:name hickory.core/Attribute, :file "resources/public/js/compiled/out/hickory/core.cljs", :line 39, :column 1, :end-line 39, :end-column 15, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/core.cljs", :line 39, :column 6, :end-line 39, :end-column 15}}, Document {:name hickory.core/Document, :file "resources/public/js/compiled/out/hickory/core.cljs", :line 41, :column 1, :end-line 41, :end-column 14, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/core.cljs", :line 41, :column 6, :end-line 41, :end-column 14}}, parse-dom-with-write {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/core.cljs", :line 135, :column 7, :end-line 135, :end-column 27, :arglists (quote ([s])), :doc "Parse an HTML document (or fragment) as a DOM using document.implementation.createHTMLDocument and document.write."}, :name hickory.core/parse-dom-with-write, :variadic false, :file "resources/public/js/compiled/out/hickory/core.cljs", :end-column 27, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 135, :end-line 135, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Parse an HTML document (or fragment) as a DOM using document.implementation.createHTMLDocument and document.write."}, HickoryRepresentable {:meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/core.cljs", :line 18, :column 14, :end-line 18, :end-column 34, :doc "Objects that can be represented as HTML DOM node maps, similar to\n   clojure.xml, implement this protocol to make the conversion.\n\n   Each DOM node will be a map or string (for Text/CDATASections). Nodes that\n   are maps have the appropriate subset of the keys\n\n     :type     - [:comment, :document, :document-type, :element]\n     :tag      - node's tag, check :type to see if applicable\n     :attrs    - node's attributes as a map, check :type to see if applicable\n     :content  - node's child nodes, in a vector, check :type to see if\n                 applicable", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {as-hickory [[this]]}}}, :protocol-symbol true, :name hickory.core/HickoryRepresentable, :file "resources/public/js/compiled/out/hickory/core.cljs", :end-column 34, :column 1, :line 18, :protocol-info {:methods {as-hickory [[this]]}}, :info nil, :end-line 18, :impls #{object}, :doc "Objects that can be represented as HTML DOM node maps, similar to\n   clojure.xml, implement this protocol to make the conversion.\n\n   Each DOM node will be a map or string (for Text/CDATASections). Nodes that\n   are maps have the appropriate subset of the keys\n\n     :type     - [:comment, :document, :document-type, :element]\n     :tag      - node's tag, check :type to see if applicable\n     :attrs    - node's attributes as a map, check :type to see if applicable\n     :content  - node's child nodes, in a vector, check :type to see if\n                 applicable", :jsdoc ("@interface")}, parse-dom-with-domparser {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/core.cljs", :line 130, :column 7, :end-line 130, :end-column 31, :arglists (quote ([s]))}, :name hickory.core/parse-dom-with-domparser, :variadic false, :file "resources/public/js/compiled/out/hickory/core.cljs", :end-column 31, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, extend-type-with-seqable {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/core.cljs", :line 46, :column 7, :end-line 46, :end-column 31, :arglists (quote ([t]))}, :name hickory.core/extend-type-with-seqable, :variadic false, :file "resources/public/js/compiled/out/hickory/core.cljs", :end-column 31, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t]))}, remove-el {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/core.cljs", :line 126, :column 7, :end-line 126, :end-column 16, :arglists (quote ([el]))}, :name hickory.core/remove-el, :variadic false, :file "resources/public/js/compiled/out/hickory/core.cljs", :end-column 16, :method-params ([el]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 1, :fn-var true, :arglists (quote ([el]))}, Comment {:name hickory.core/Comment, :file "resources/public/js/compiled/out/hickory/core.cljs", :line 40, :column 1, :end-line 40, :end-column 13, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/core.cljs", :line 40, :column 6, :end-line 40, :end-column 13}}, as-hickory {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/core.cljs", :line 30, :column 4, :end-line 30, :end-column 14, :protocol hickory.core/HickoryRepresentable, :doc "Converts the node given into a hickory-format data structure. The\n     node must have an implementation of the HickoryRepresentable protocol;\n     nodes created by parse or parse-fragment already do.", :arglists (quote ([this]))}, :protocol hickory.core/HickoryRepresentable, :name hickory.core/as-hickory, :variadic false, :file "resources/public/js/compiled/out/hickory/core.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Converts the node given into a hickory-format data structure. The\n     node must have an implementation of the HickoryRepresentable protocol;\n     nodes created by parse or parse-fragment already do."}, Element {:name hickory.core/Element, :file "resources/public/js/compiled/out/hickory/core.cljs", :line 43, :column 1, :end-line 43, :end-column 13, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/core.cljs", :line 43, :column 6, :end-line 43, :end-column 13}}, extract-doctype {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/core.cljs", :line 119, :column 7, :end-line 119, :end-column 22, :arglists (quote ([s]))}, :name hickory.core/extract-doctype, :variadic false, :file "resources/public/js/compiled/out/hickory/core.cljs", :end-column 22, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, parse-fragment {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/core.cljs", :line 155, :column 7, :end-line 155, :end-column 21, :arglists (quote ([s])), :doc "Parse an HTML fragment (some group of tags that might be at home somewhere\n   in the tag hierarchy under <body>) into a list of DOM elements that can\n   each be passed as input to as-hiccup or as-hickory."}, :name hickory.core/parse-fragment, :variadic false, :file "resources/public/js/compiled/out/hickory/core.cljs", :end-column 21, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Parse an HTML fragment (some group of tags that might be at home somewhere\n   in the tag hierarchy under <body>) into a list of DOM elements that can\n   each be passed as input to as-hiccup or as-hickory."}, node-type {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/core.cljs", :line 35, :column 7, :end-line 35, :end-column 16, :arglists (quote ([type]))}, :name hickory.core/node-type, :variadic false, :file "resources/public/js/compiled/out/hickory/core.cljs", :end-column 16, :method-params ([type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([type]))}, DocumentType {:name hickory.core/DocumentType, :file "resources/public/js/compiled/out/hickory/core.cljs", :line 42, :column 1, :end-line 42, :end-column 18, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/core.cljs", :line 42, :column 6, :end-line 42, :end-column 18}}, as-hiccup {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/core.cljs", :line 13, :column 4, :end-line 13, :end-column 13, :protocol hickory.core/HiccupRepresentable, :doc "Converts the node given into a hiccup-format data structure. The\n     node must have an implementation of the HiccupRepresentable\n     protocol; nodes created by parse or parse-fragment already do.", :arglists (quote ([this]))}, :protocol hickory.core/HiccupRepresentable, :name hickory.core/as-hiccup, :variadic false, :file "resources/public/js/compiled/out/hickory/core.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Converts the node given into a hiccup-format data structure. The\n     node must have an implementation of the HiccupRepresentable\n     protocol; nodes created by parse or parse-fragment already do."}, parse {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/core.cljs", :line 149, :column 7, :end-line 149, :end-column 12, :arglists (quote ([s])), :doc "Parse an entire HTML document into a DOM structure that can be\n   used as input to as-hiccup or as-hickory."}, :name hickory.core/parse, :variadic false, :file "resources/public/js/compiled/out/hickory/core.cljs", :end-column 12, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Parse an entire HTML document into a DOM structure that can be\n   used as input to as-hiccup or as-hickory."}, Text {:name hickory.core/Text, :file "resources/public/js/compiled/out/hickory/core.cljs", :line 44, :column 1, :end-line 44, :end-column 10, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/core.cljs", :line 44, :column 6, :end-line 44, :end-column 10}}, format-doctype {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/core.cljs", :line 60, :column 7, :end-line 60, :end-column 21, :arglists (quote ([dt]))}, :name hickory.core/format-doctype, :variadic false, :file "resources/public/js/compiled/out/hickory/core.cljs", :end-column 21, :method-params ([dt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dt]))}, HiccupRepresentable {:meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/resources/public/js/compiled/out/hickory/core.cljs", :line 10, :column 14, :end-line 10, :end-column 33, :doc "Objects that can be represented as Hiccup nodes implement this protocol in\n   order to make the conversion.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {as-hiccup [[this]]}}}, :protocol-symbol true, :name hickory.core/HiccupRepresentable, :file "resources/public/js/compiled/out/hickory/core.cljs", :end-column 33, :column 1, :line 10, :protocol-info {:methods {as-hiccup [[this]]}}, :info nil, :end-line 10, :impls #{object}, :doc "Objects that can be represented as Hiccup nodes implement this protocol in\n   order to make the conversion.", :jsdoc ("@interface")}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:element :content :name :publicid :type :systemid :document-type :document :comment :attrs :tag}, :order [:type :content :comment :document :attrs :document-type :name :publicid :systemid :tag :element]}, :doc nil}