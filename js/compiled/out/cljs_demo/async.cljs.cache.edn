;; Analyzed by ClojureScript 1.7.170
{:use-macros {go cljs.core.async.macros, defcard-rg devcards.core, go-loop cljs.core.async.macros, defcard-doc devcards.core}, :excludes #{update}, :name cljs-demo.async, :imports {Uri goog.Uri}, :requires {reagent reagent.core, Uri goog.Uri, ajax.core ajax.core, devcards.core devcards.core, select hickory.select, async cljs.core.async, hickory hickory.core, reagent.core reagent.core, dc devcards.core, cljs.core.async cljs.core.async, ajax ajax.core, str clojure.string, clojure.string clojure.string, hickory.core hickory.core, hickory.select hickory.select}, :uses {<! cljs.core.async, chan cljs.core.async, pipe cljs.core.async, >! cljs.core.async}, :defs {ajax-get {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :line 20, :column 7, :end-line 20, :end-column 15, :arglists (quote ([url])), :doc "Wrap a GET request in a core.async channel"}, :name cljs-demo.async/ajax-get, :variadic false, :file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :end-column 15, :method-params ([url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url])), :doc "Wrap a GET request in a core.async channel"}, mj-component {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :line 64, :column 7, :end-line 64, :end-column 19, :arglists (quote ([state-atom]))}, :name cljs-demo.async/mj-component, :variadic false, :file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :end-column 19, :method-params ([state-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state-atom]))}, parse-html {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :line 99, :column 7, :end-line 99, :end-column 17, :arglists (quote ([html]))}, :name cljs-demo.async/parse-html, :variadic false, :file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :end-column 17, :method-params ([html]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 1, :fn-var true, :arglists (quote ([html]))}, web-crawler {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :line 139, :column 7, :end-line 139, :end-column 18, :arglists (quote ([url n log])), :doc "Recursively crawl urls `n` levels deep"}, :name cljs-demo.async/web-crawler, :variadic false, :file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :end-column 18, :method-params ([url n log]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 3, :fn-var true, :arglists (quote ([url n log])), :doc "Recursively crawl urls `n` levels deep"}, web-crawler-component {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :line 151, :column 7, :end-line 151, :end-column 28, :arglists (quote ([url-atom depth-atom log-atom]))}, :name cljs-demo.async/web-crawler-component, :variadic false, :file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :end-column 28, :method-params ([url-atom depth-atom log-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 3, :fn-var true, :arglists (quote ([url-atom depth-atom log-atom]))}, get-mj-data {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :line 43, :column 7, :end-line 43, :end-column 18, :arglists (quote ([state-atom])), :doc "Get medical marijuana usage data as parsed CSV and update atom"}, :name cljs-demo.async/get-mj-data, :variadic false, :file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :end-column 18, :method-params ([state-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state-atom])), :doc "Get medical marijuana usage data as parsed CSV and update atom"}, ->t_cljs_demo$async17407 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.core/IWithMeta devcards.core/IDevcardOptions}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([meta17408])), :file nil}, :protocols #{cljs.core/IMeta cljs.core/IWithMeta devcards.core/IDevcardOptions}, :name cljs-demo.async/->t_cljs_demo$async17407, :variadic false, :file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :method-params ([meta17408]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 1, :factory :positional, :line 82, :max-fixed-arity 1, :fn-var true, :arglists (quote ([meta17408])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs_demo$async17540 {:num-fields 1, :protocols #{cljs.core/IMeta cljs.core/IWithMeta devcards.core/IDevcardOptions}, :name cljs-demo.async/t_cljs_demo$async17540, :file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :type true, :anonymous true, :column 1, :line 171, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, starts-with {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :line 95, :column 7, :end-line 95, :end-column 18, :arglists (quote ([s pre]))}, :name cljs-demo.async/starts-with, :variadic false, :file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :end-column 18, :method-params ([s pre]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s pre]))}, crawl-url {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :line 125, :column 7, :end-line 125, :end-column 16, :arglists (quote ([url])), :doc "Query a url and parse out urls inside of it"}, :name cljs-demo.async/crawl-url, :variadic false, :file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :end-column 16, :method-params ([url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url])), :doc "Query a url and parse out urls inside of it"}, parse-csv {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :line 28, :column 7, :end-line 28, :end-column 16, :arglists (quote ([raw]))}, :name cljs-demo.async/parse-csv, :variadic false, :file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :end-column 16, :method-params ([raw]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([raw]))}, medical-marijuana-url {:name cljs-demo.async/medical-marijuana-url, :file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :line 14, :column 1, :end-line 14, :end-column 27, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :line 14, :column 6, :end-line 14, :end-column 27}}, mj-data-component {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :line 54, :column 7, :end-line 54, :end-column 24, :arglists (quote ([state-atom]))}, :name cljs-demo.async/mj-data-component, :variadic false, :file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :end-column 24, :method-params ([state-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state-atom]))}, t_cljs_demo$async17407 {:num-fields 1, :protocols #{cljs.core/IMeta cljs.core/IWithMeta devcards.core/IDevcardOptions}, :name cljs-demo.async/t_cljs_demo$async17407, :file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :type true, :anonymous true, :column 1, :line 82, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, select-urls {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :line 102, :column 7, :end-line 102, :end-column 18, :arglists (quote ([dom]))}, :name cljs-demo.async/select-urls, :variadic false, :file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :end-column 18, :method-params ([dom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dom]))}, split-url {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :line 109, :column 7, :end-line 109, :end-column 16, :arglists (quote ([url]))}, :name cljs-demo.async/split-url, :variadic false, :file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :end-column 16, :method-params ([url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url]))}, standardize-urls {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :line 114, :column 7, :end-line 114, :end-column 23, :arglists (quote ([base urls]))}, :name cljs-demo.async/standardize-urls, :variadic false, :file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :end-column 23, :method-params ([base urls]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base urls]))}, ->t_cljs_demo$async17540 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.core/IWithMeta devcards.core/IDevcardOptions}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([meta17541])), :file nil}, :protocols #{cljs.core/IMeta cljs.core/IWithMeta devcards.core/IDevcardOptions}, :name cljs-demo.async/->t_cljs_demo$async17540, :variadic false, :file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :method-params ([meta17541]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 1, :factory :positional, :line 171, :max-fixed-arity 1, :fn-var true, :arglists (quote ([meta17541])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ajax-get-csv {:protocol-inline nil, :meta {:file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :line 34, :column 7, :end-line 34, :end-column 19, :arglists (quote ([url])), :doc "Get a url and parse its successful response as csv\n   Return a core.async channel of parsed csv"}, :name cljs-demo.async/ajax-get-csv, :variadic false, :file "/Users/jon/dev/talks/cljs-for-js-devs/src/cljs_demo/async.cljs", :end-column 19, :method-params ([url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url])), :doc "Get a url and parse its successful response as csv\n   Return a core.async channel of parsed csv"}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, dc devcards.core, devcards.core devcards.core}, :cljs.analyzer/constants {:seen #{:path meta17541 :tbody :table :ul :key :mj-data :else :button :func :name :td :thead>tr :value :tr :recur :type :header :on-click :documentation :style :div :card :main-obj :watch-atom :initial-data :label :mj-data-card :url :attrs :display :depth meta17408 :options :input :on-change :h3 :body :div.medical-marijuana :web-crawler :handler :log :p :cljs_demo.async :href :a :heading :hide-border}, :order [:handler :recur :else :header :body :mj-data :table :thead>tr :td :key :tbody :tr :p :div.medical-marijuana :button :on-click :style :display :path :func :cljs_demo.async :card :name :documentation :main-obj :initial-data :options :heading :hide-border :mj-data-card meta17408 :watch-atom :a :href :attrs :div :label :input :type :value :on-change :h3 :ul :web-crawler :url :depth :log meta17541]}, :doc nil}